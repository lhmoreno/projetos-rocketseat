generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String

  slug String @unique

  booksPageReadAmount Int
  ratingedBooksAmount Int
  authorsReadAmount   Int
  mostReadCategory    String

  accounts Account[]
  sessions Session[]
  ratings  Rating[]

  @@map("users")
}

model Account {
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Book {
  id         String @id @default(uuid())
  name       String
  author     String
  summary    String
  coverUrl   String
  totalPages Int

  categories    Json
  rate          Float
  ratingsAmount Int

  ratings Rating[]

  @@map("books")
}

model Rating {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rate        Float
  description String

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([bookId, userId])
  @@map("ratings")
}
